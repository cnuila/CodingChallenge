// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FlamingSoftHR.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using FlamingSoftHR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using FlamingSoftHR.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using FlamingSoftHR.Client.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using FlamingSoftHR.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/loggedtimetypes")]
    public partial class LoggedTimeTypePage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 47 "/Users/cnuila/Proyectos/CodingChallengeFlamingSoft1/FlamingSoftHR/Client/Pages/LoggedTimeTypePage.razor"
       

    [Inject]
    public IDialogService DialogService { get; set; }

    [Inject]
    public ILoggedTimeTypeService LoggedTimeTypeService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    private List<LoggedTimeType> loggedTimeTypes { get; set; }
    private bool loading = true;

    // load logged time types, once loaded loading the animation stops
    protected async override Task OnInitializedAsync()
    {
        loggedTimeTypes = (await LoggedTimeTypeService.GetLoggedTimeTypes()).ToList();
        loading = false;
    }

    protected async void AddLoggedTimeType()
    {
        var parameters = new DialogParameters();
        parameters.Add("FieldName", "Description");
        var dialog = DialogService.Show<AddUpdateSimple>("Add Logged Time Type", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            LoggedTimeType response = await LoggedTimeTypeService.AddLoggedTimeType(new LoggedTimeType { Description = (string)result.Data });

            if (response != null)
            {
                loggedTimeTypes = (await LoggedTimeTypeService.GetLoggedTimeTypes()).ToList();
                Snackbar.Add($"Logged Time Type Created Successfully", Severity.Success);
                StateHasChanged();
            }
        }

    }

    protected async void UpdateLoggedTimeType(int id)
    {
        LoggedTimeType loggedTimeTypeToUpdate = await LoggedTimeTypeService.GetLoggedTimeType(id);

        string loggedTimeTypeDescription = loggedTimeTypeToUpdate.Description;

        var parameters = new DialogParameters();
        parameters.Add("FieldName", "Name");
        parameters.Add("FieldValue", loggedTimeTypeDescription);

        var dialog = DialogService.Show<AddUpdateSimple>("Update Logged Time Type", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            LoggedTimeType response = await LoggedTimeTypeService.UpdateLoggedTimeType(new LoggedTimeType { Id = id, Description = (string)result.Data });

            if (response.Id != 0)
            {
                loggedTimeTypes = (await LoggedTimeTypeService.GetLoggedTimeTypes()).ToList();
                Snackbar.Add($"Logged Time Type Updated Successfully", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"An error has ocurred", Severity.Error);
            }
        }

    }

    protected async void DeleteLoggedTimeType(int id)
    {
        await LoggedTimeTypeService.DeleteLoggedTimeType(id);
        loggedTimeTypes = (await LoggedTimeTypeService.GetLoggedTimeTypes()).ToList();
        Snackbar.Add($"Logged Time Type Deleted Successfully", Severity.Success);
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
