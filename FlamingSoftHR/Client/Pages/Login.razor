@page "/login"

<div>
    <MudGrid Justify="Justify.Center" Class="py-4">
        <MudItem xs="5">

            <MudCard>

                <MudText Typo="Typo.h4" Class="red-text text-darken-3 py-4 px-10"> Login </MudText>

                <MudCardContent>
                    <MudForm @bind-IsValid="@success">

                        <MudGrid>

                            <MudItem xs="12" Class="px-10">
                                <MudTextField T="string" Label="Email" @bind-Value="@loginModel.Email" Required="true" RequiredError="Email is required" Validation="@loginModel.Email" />
                            </MudItem>

                            <MudItem xs="12" Class="px-10">
                                <MudTextField T="string" Label="Password" @bind-Value="@loginModel.Password"
                                              InputType="InputType.Password"
                                              Validation="@loginModel.Password" Required="true"
                                              RequiredError="Password is required" />

                            </MudItem>

                        </MudGrid>

                    </MudForm>
                </MudCardContent>

                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Disabled="@(!success)" OnClick="HandleLogin" Class="red darken-2 white-text ml-auto mr-10">Login</MudButton>
                </MudCardActions>

            </MudCard>


            <MudExpansionPanels>
                <MudExpansionPanel Text="@("Show Error")">
                    @if (!String.IsNullOrEmpty(error))
                    {
                    <MudText Color="@Color.Error">@error</MudText>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>

        </MudItem>
    </MudGrid>
</div>

@code {

    [Inject]
    public IAuthService AuthService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private LoginModel loginModel= new LoginModel();

    private string error {get; set; }
    private bool success { get; set; }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/", forceLoad:true);
        }
        else
        {
            error = result.Error;
        }
    }



}
