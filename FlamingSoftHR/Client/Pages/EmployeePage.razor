@page "/employees"

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" Class="pa-8">

        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <MudPaper Elevation="4" Class="grey lighten-4 pa-7 red-text text-darken-2">

                    <MudGrid>

                        <MudItem xs="12">
                            <MudText Typo="Typo.h4"> Employees </MudText>
                        </MudItem>

                        <MudItem xs="12">

                            <MudTable @ref="mudTable" ServerData="@(new Func<TableState, Task<TableData<Employee>>>(ServerPaging))" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Error">

                                <HeaderContent>
                                    <MudTh Class="red-text text-darken-4">Employee Id</MudTh>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Department</MudTh>
                                    <MudTh>Salary</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>

                                <RowTemplate>
                                    <MudTd DataLabel="Employee Id"> @context.Id </MudTd>
                                    <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
                                    <MudTd DataLabel="Department">@context.Job.Department.Name</MudTd>
                                    <MudTd DataLabel="Salary"> $ @(String.Format("{0:n}",context.Salary))</MudTd>
                                    <MudTd DataLabel="Action">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="red-text text-darken-3" OnClick="@(() => UpdateEmployee(context.Id))"></MudIconButton>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="red-text text-darken-3" OnClick="@(() => DeleteEmployee(context.Id))"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>

                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>

                            </MudTable>

                        </MudItem>

                    </MudGrid>

                </MudPaper>
            </MudItem>
        </MudGrid>

    </MudItem>
</MudGrid>

@code {

    [Inject]
    public IDialogService DialogService { get; set; }

    [Inject]
    public IEmployeeService EmployeeService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    private MudTable<Employee> mudTable { get; set; }

    private bool loading = true;

    // skip = current page times the size of it in order to get how many of them we want to skip
    // once skip and take are assigned, it queries with the data provided
    private async Task<TableData<Employee>> ServerPaging(TableState tableState)
    {
        int skip = tableState.Page * tableState.PageSize;
        int take = tableState.PageSize;

        EmployeeDataResult result = await EmployeeService.GetEmployees(skip, take);
        loading = false;

        int totalItems = result.Count;

        return new TableData<Employee>() { TotalItems = totalItems, Items = result.Employees.ToList() };
    }

    protected async void UpdateEmployee(int id)
    {
        Employee employeeToUpdate = await EmployeeService.GetEmployee(id);

        var parameters = new DialogParameters();
        parameters.Add("Employee", employeeToUpdate);

        var dialog = DialogService.Show<UpdateEmployee>("Update Employee", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            Employee response = await EmployeeService.UpdateEmployee((Employee)result.Data);

            if (response != null)
            {
                await mudTable.ReloadServerData();
                Snackbar.Add($"Employee Updated Successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add($"An error has ocurred", Severity.Error);
            }
        }

    }

    protected async void DeleteEmployee(int id)
    {
        await EmployeeService.DeleteEmployee(id);
        await mudTable.ReloadServerData();
        Snackbar.Add($"Employee Deleted Successfully", Severity.Success);
    }

}
