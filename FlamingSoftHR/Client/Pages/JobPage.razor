@page "/jobs"

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" Class="pa-8">

        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="10">
                <MudPaper Elevation="4" Class="grey lighten-4 pa-7 red-text text-darken-2">

                    <MudGrid>

                        <MudItem xs="7">
                            <MudText Typo="Typo.h4"> Jobs </MudText>
                        </MudItem>

                        <MudItem xs="5" Class="d-flex justify-end">
                            <MudButton Variant="Variant.Filled" Size="Size.Medium" Class="red darken-2 white-text" OnClick="@AddJob"> Add </MudButton>
                        </MudItem>

                        <MudItem xs="12">
                            <MudTable @ref="mudTable" ServerData="@(new Func<TableState, Task<TableData<Job>>>(ServerPaging))" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Error">
                                <HeaderContent>
                                    <MudTh> Id </MudTh>
                                    <MudTh> Description </MudTh>
                                    <MudTh> Min. Salary </MudTh>
                                    <MudTh> Max. Salary </MudTh>
                                    <MudTh> Department </MudTh>
                                    <MudTh> Actions  </MudTh>
                                </HeaderContent>

                                <RowTemplate>
                                    <MudTd DataLabel="Id"> @context.Id</MudTd>
                                    <MudTd DataLabel="Description">@context.Description</MudTd>
                                    <MudTd DataLabel="Min. Salary">@(String.Format("{0:n}",context.MinSalary))  </MudTd>
                                    <MudTd DataLabel="Max. Salary">@(String.Format("{0:n}",context.MaxSalary))</MudTd>
                                    <MudTd DataLabel="Department">@context.Department.Name</MudTd>
                                    <MudTd DataLabel="Action">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="red-text text-darken-3" OnClick="@(() => UpdateJob(context.Id))"></MudIconButton>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="red-text text-darken-3" OnClick="@(() => DeleteJob(context.Id))"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>

                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>

                            </MudTable>
                        </MudItem>

                    </MudGrid>

                </MudPaper>
            </MudItem>
        </MudGrid>

    </MudItem>
</MudGrid>

@code {

    [Inject]
    public IDialogService DialogService { get; set; }

    [Inject]
    public IJobService JobService{ get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    private MudTable<Job> mudTable { get; set; }

    private bool loading = true;

    // skip = current page times the size of it in order to get how many of them we want to skip
    // once skip and take are assigned, it queries with the data provided
    private async Task<TableData<Job>> ServerPaging(TableState tableState)
    {
        int skip = tableState.Page * tableState.PageSize;
        int take = tableState.PageSize;

        JobDataResult result = await JobService.GetJobs(skip, take);
        loading = false;

        int totalItems = result.Count;

        return new TableData<Job>() { TotalItems = totalItems, Items = result.Jobs.ToList() };
    }

    protected async void AddJob()
    {
        var parameters = new DialogParameters();
        parameters.Add("Job", new Job());

        var dialog = DialogService.Show<AddUpdateJob>("Add Job", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            Job response = await JobService.AddJob((Job)result.Data);

            if (response != null)
            {
                await mudTable.ReloadServerData();
                Snackbar.Add($"Job Created Successfully", Severity.Success);
            }
        }
    }

    protected async void UpdateJob(int id)
    {
        Job jobToUpdate = await JobService.GetJob(id);

        var parameters = new DialogParameters();
        parameters.Add("Job", jobToUpdate);

        var dialog = DialogService.Show<AddUpdateJob>("Update Job", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            Job response = await JobService.UpdateJob((Job)result.Data);

            if (response != null)
            {
                await mudTable.ReloadServerData();
                Snackbar.Add($"Job Updated Successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add($"An error has ocurred", Severity.Error);
            }
        }

    }

    protected async void DeleteJob(int id)
    {
        await JobService.DeleteJob(id);
        await mudTable.ReloadServerData();
        Snackbar.Add($"Job Deleted Successfully", Severity.Success);
    }

}
