@page "/loggedtimetypes"

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" Class="pa-8">
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="7">
                <MudPaper Elevation="4" Class="grey lighten-4 pa-7 red-text text-darken-2">

                    <MudGrid>

                        <MudItem xs="7">
                            <MudText Typo="Typo.h4"> Logged Time Types </MudText>
                        </MudItem>

                        <MudItem xs="5" Class="d-flex justify-end">
                            <MudButton Variant="Variant.Filled" Size="Size.Medium" Class="red darken-2 white-text" OnClick="@AddLoggedTimeType"> Add </MudButton>
                        </MudItem>

                        <MudItem xs="12">
                            <MudTable Hover="true" Items="@loggedTimeTypes" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Error">
                                <HeaderContent>
                                    <MudTh> Id </MudTh>
                                    <MudTh> Description </MudTh>
                                    <MudTh> Actions  </MudTh>
                                </HeaderContent>

                                <RowTemplate>
                                    <MudTd DataLabel="Id"> @context.Id</MudTd>
                                    <MudTd DataLabel="Description">@context.Description</MudTd>
                                    <MudTd DataLabel="Action">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="red-text text-darken-3" OnClick="@(() => UpdateLoggedTimeType(context.Id))"></MudIconButton>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="red-text text-darken-3" OnClick="@(() => DeleteLoggedTimeType(context.Id))"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>

                            </MudTable>
                        </MudItem>

                    </MudGrid>

                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {

    [Inject]
    public IDialogService DialogService { get; set; }

    [Inject]
    public ILoggedTimeTypeService LoggedTimeTypeService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    private List<LoggedTimeType> loggedTimeTypes { get; set; }
    private bool loading = true;

    // load logged time types, once loaded loading the animation stops
    protected async override Task OnInitializedAsync()
    {
        loggedTimeTypes = (await LoggedTimeTypeService.GetLoggedTimeTypes()).ToList();
        loading = false;
    }

    protected async void AddLoggedTimeType()
    {
        var parameters = new DialogParameters();
        parameters.Add("FieldName", "Description");
        var dialog = DialogService.Show<AddUpdateSimple>("Add Logged Time Type", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            LoggedTimeType response = await LoggedTimeTypeService.AddLoggedTimeType(new LoggedTimeType { Description = (string)result.Data });

            if (response != null)
            {
                loggedTimeTypes = (await LoggedTimeTypeService.GetLoggedTimeTypes()).ToList();
                Snackbar.Add($"Logged Time Type Created Successfully", Severity.Success);
                StateHasChanged();
            }
        }

    }

    protected async void UpdateLoggedTimeType(int id)
    {
        LoggedTimeType loggedTimeTypeToUpdate = await LoggedTimeTypeService.GetLoggedTimeType(id);

        string loggedTimeTypeDescription = loggedTimeTypeToUpdate.Description;

        var parameters = new DialogParameters();
        parameters.Add("FieldName", "Name");
        parameters.Add("FieldValue", loggedTimeTypeDescription);

        var dialog = DialogService.Show<AddUpdateSimple>("Update Logged Time Type", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            LoggedTimeType response = await LoggedTimeTypeService.UpdateLoggedTimeType(new LoggedTimeType { Id = id, Description = (string)result.Data });

            if (response != null)
            {
                loggedTimeTypes = (await LoggedTimeTypeService.GetLoggedTimeTypes()).ToList();
                Snackbar.Add($"Logged Time Type Updated Successfully", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"An error has ocurred", Severity.Error);
            }
        }

    }

    protected async void DeleteLoggedTimeType(int id)
    {
        await LoggedTimeTypeService.DeleteLoggedTimeType(id);
        loggedTimeTypes = (await LoggedTimeTypeService.GetLoggedTimeTypes()).ToList();
        Snackbar.Add($"Logged Time Type Deleted Successfully", Severity.Success);
        StateHasChanged();
    }
}
